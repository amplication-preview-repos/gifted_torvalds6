/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Todo as PrismaTodo, User as PrismaUser } from "@prisma/client";

export class TodoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TodoCountArgs, "select">): Promise<number> {
    return this.prisma.todo.count(args);
  }

  async todos<T extends Prisma.TodoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TodoFindManyArgs>
  ): Promise<PrismaTodo[]> {
    return this.prisma.todo.findMany<Prisma.TodoFindManyArgs>(args);
  }
  async todo<T extends Prisma.TodoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TodoFindUniqueArgs>
  ): Promise<PrismaTodo | null> {
    return this.prisma.todo.findUnique(args);
  }
  async createTodo<T extends Prisma.TodoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TodoCreateArgs>
  ): Promise<PrismaTodo> {
    return this.prisma.todo.create<T>(args);
  }
  async updateTodo<T extends Prisma.TodoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TodoUpdateArgs>
  ): Promise<PrismaTodo> {
    return this.prisma.todo.update<T>(args);
  }
  async deleteTodo<T extends Prisma.TodoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TodoDeleteArgs>
  ): Promise<PrismaTodo> {
    return this.prisma.todo.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.todo
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
